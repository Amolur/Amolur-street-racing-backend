const express = require('express');
const router = express.Router();
const User = require('../models/User');
const authMiddleware = require('../middleware/auth');
const { gameSaveLimiter } = require('../middleware/rateLimiter');
const { validateSaveData, detectCheating } = require('../middleware/validator');
const gameLogic = require('../utils/gameLogic');
const eventManager = require('../utils/eventManager');

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä –µ—Å–ª–∏ securityLogger –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
let securityLogger;
try {
    securityLogger = require('../utils/securityLogger');
} catch (error) {
    // –ü—Ä–æ—Å—Ç–æ–π fallback –ª–æ–≥–≥–µ—Ä
    securityLogger = {
        logSuspiciousActivity: (userId, username, activity, data) => {
            console.warn(`[SECURITY] User ${username} (${userId}): ${activity}`);
        }
    };
}

// –í—Å–µ –∏–≥—Ä–æ–≤—ã–µ —Ä–æ—É—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
router.use(authMiddleware);

// –ö–µ—à –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
const leaderboardCache = new Map();
const CACHE_TTL = 60000; // 1 –º–∏–Ω—É—Ç–∞

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
router.get('/data', async (req, res) => {
    try {
        const user = await User.findById(req.userId).select('-password').lean();
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –º–µ—Ç–æ–¥–æ–≤
        const userModel = await User.findById(req.userId);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ø–ª–∏–≤–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
        userModel.regenerateFuel();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        const tasksReset = userModel.checkAndResetDailyTasks();
        
        await userModel.save();
        
        res.json({
            userId: userModel._id,
            username: userModel.username,
            gameData: userModel.gameData
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
    }
});

// –ó–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
router.post('/save', gameSaveLimiter, validateSaveData, async (req, res) => {
    try {
        const { gameData } = req.body;
        
        const currentUser = await User.findById(req.userId);
        if (!currentUser) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        gameData.lastSaveTimestamp = new Date();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∏—Ç—ã (–º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        const suspiciousChanges = detectCheating(currentUser.gameData, gameData);
        if (suspiciousChanges.length > 0) {
            securityLogger.logSuspiciousActivity(
                req.userId,
                currentUser.username,
                '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏',
                {
                    changes: suspiciousChanges,
                    ip: req.ip || req.connection.remoteAddress
                }
            );
            
            if (!currentUser.suspiciousActivityCount) {
                currentUser.suspiciousActivityCount = 0;
            }
            currentUser.suspiciousActivityCount++;
            
            if (currentUser.suspiciousActivityCount > 10) {
                currentUser.flaggedForReview = true;
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        currentUser.gameData = gameData;
        currentUser.lastActivity = new Date();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        await currentUser.save({ 
            validateBeforeSave: false, // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            timestamps: true 
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        res.json({ 
            success: true,
            timestamp: new Date(),
            savedAt: gameData.lastSaveTimestamp
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ –ª–æ–≥–∞—Ö
        if (error.name === 'ValidationError') {
            console.error('–î–µ—Ç–∞–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.errors);
        }
        
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö',
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

// –ù–û–í–´–ô –ó–ê–©–ò–©–ï–ù–ù–´–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∏–ø–æ–≤
router.post('/race', async (req, res) => {
    try {
        const { carIndex, opponentIndex, betAmount, raceType = 'classic', fuelCost } = req.body;
        
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const car = user.gameData.cars[carIndex];
        if (!car) {
            return res.status(400).json({ error: '–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const opponents = gameLogic.generateOpponents(user.gameData.level);
        const opponent = opponents[opponentIndex];
        if (!opponent) {
            return res.status(400).json({ error: '–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å–≥–∏
        if (user.gameData.money < betAmount) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å—Ç–∞–≤–∫–∏' });
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ç–∏–ø–∞ –≥–æ–Ω–∫–∏
        const raceTypeModifiers = {
            classic: { fuelMult: 1, rewardMult: 1, xpMult: 1 },
            drift: { fuelMult: 0.8, rewardMult: 1.2, xpMult: 1.5 },
            sprint: { fuelMult: 0.5, rewardMult: 0.7, xpMult: 0.8 },
            endurance: { fuelMult: 2, rewardMult: 2, xpMult: 2.5 }
        };
        
        const modifiers = raceTypeModifiers[raceType] || raceTypeModifiers.classic;
        
        // –†–∞—Å—á–µ—Ç —Ç–æ–ø–ª–∏–≤–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –≥–æ–Ω–∫–∏
        const baseFuelCost = opponent.fuelCost;
        const actualFuelCost = fuelCost || Math.ceil(opponent.fuelCost * modifiers.fuelMult);
        const currentFuel = user.getFuelForCar(carIndex);
        
        if (currentFuel < actualFuelCost) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ø–ª–∏–≤–∞' });
        }
        
        // –†–ê–°–ß–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ù–ê –°–ï–†–í–ï–†–ï —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –≥–æ–Ω–∫–∏
        const raceResult = gameLogic.calculateRaceResult(
            car, 
            user.gameData.skills, 
            opponent.difficulty,
            raceType
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        const currentEvent = await eventManager.getCurrentEvent();
        let eventBonus = null;
        
        // –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –≥–æ–Ω–∫–∏
        const baseReward = Math.floor(opponent.reward * modifiers.rewardMult);
        const originalXP = gameLogic.calculateXPGain(raceResult.won, opponent.difficulty, betAmount);
        let xpGained = Math.floor(originalXP * modifiers.xpMult);
        let finalReward = baseReward;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ–±—ã—Ç–∏—è
        if (currentEvent) {
            switch (currentEvent.type) {
                case 'double_rewards':
                    if (raceResult.won) {
                        finalReward = baseReward * 2;
                        eventBonus = `üí∞ –î–≤–æ–π–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞! +$${finalReward - baseReward}`;
                    }
                    break;
                case 'bonus_xp':
                    xpGained = Math.floor(xpGained * 2);
                    eventBonus = `‚≠ê –î–≤–æ–π–Ω–æ–π –æ–ø—ã—Ç! +${xpGained - Math.floor(originalXP * modifiers.xpMult)} XP`;
                    break;
                case 'free_fuel':
                    eventBonus = `‚õΩ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–æ–Ω–∫–∞!`;
                    break;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ø–ª–∏–≤–æ —Å —É—á–µ—Ç–æ–º —Å–æ–±—ã—Ç–∏—è
        if (!currentEvent || currentEvent.type !== 'free_fuel') {
            user.spendFuel(carIndex, actualFuelCost);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user.gameData.stats.totalRaces++;
        
        if (raceResult.won) {
            user.gameData.stats.wins++;
            user.gameData.money += finalReward;
            user.gameData.stats.moneyEarned += finalReward;
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –≥–æ–Ω–æ–∫
            if (!user.gameData.stats.raceTypeWins) {
                user.gameData.stats.raceTypeWins = {};
            }
            user.gameData.stats.raceTypeWins[raceType] = (user.gameData.stats.raceTypeWins[raceType] || 0) + 1;
        } else {
            user.gameData.stats.losses++;
            user.gameData.money -= betAmount;
            user.gameData.stats.moneySpent += betAmount;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
        user.gameData.experience += xpGained;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        const levelResult = gameLogic.checkLevelUp(user.gameData.level, user.gameData.experience);
        if (levelResult.leveledUp) {
            user.gameData.level = levelResult.newLevel;
            user.gameData.money += levelResult.reward;
        }
        
        // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ù–ê–í–´–ö–û–í –ù–ê –°–ï–†–í–ï–†–ï
        const skillResult = gameLogic.tryGetSkill(
            user.gameData.skills,
            raceResult.won,
            raceType,
            opponent.difficulty
        );
        
        if (skillResult.success) {
            user.gameData.skills[skillResult.skill]++;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è
        user.updateTaskProgress('totalRaces');
        user.updateTaskProgress('fuelSpent', (!currentEvent || currentEvent.type !== 'free_fuel') ? actualFuelCost : 0);
        if (raceResult.won) {
            user.updateTaskProgress('wins');
            user.updateTaskProgress('moneyEarned', finalReward);
        }
        
        await user.save();
        
        res.json({
            success: true,
            result: {
                won: raceResult.won,
                playerTime: raceResult.playerTime,
                opponentTime: raceResult.opponentTime,
                nitroActivated: raceResult.nitroActivated,
                reward: raceResult.won ? finalReward : -betAmount,
                xpGained: xpGained,
                leveledUp: levelResult.leveledUp,
                levelReward: levelResult.reward,
                raceType: raceType
            },
            gameData: {
                money: user.gameData.money,
                experience: user.gameData.experience,
                level: user.gameData.level,
                fuel: currentFuel - ((!currentEvent || currentEvent.type !== 'free_fuel') ? actualFuelCost : 0)
            },
            eventBonus: eventBonus,
            eventActive: currentEvent ? currentEvent.type : null,
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤—ã–∫–µ
            skillGained: skillResult.success ? {
                skill: skillResult.skill,
                newLevel: user.gameData.skills[skillResult.skill],
                chance: skillResult.chance
            } : null
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–Ω–∫–∏' });
    }
});

// –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –ø–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
router.post('/upgrade', async (req, res) => {
    try {
        const { carIndex, upgradeType } = req.body;
        
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const car = user.gameData.cars[carIndex];
        if (!car) {
            return res.status(400).json({ error: '–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        const currentLevel = car.upgrades[upgradeType] || 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
        const upgradeCheck = gameLogic.canUpgrade(car, upgradeType, user.gameData.money, currentLevel);
        if (!upgradeCheck.canUpgrade) {
            return res.status(400).json({ error: upgradeCheck.reason });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–∫–∏–¥–æ–∫
        const currentEvent = await eventManager.getCurrentEvent();
        let finalCost = upgradeCheck.cost;
        let eventDiscount = false;
        
        if (currentEvent && currentEvent.type === 'upgrade_discount') {
            finalCost = Math.floor(upgradeCheck.cost * 0.5); // 50% —Å–∫–∏–¥–∫–∞
            eventDiscount = true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å–≥–∏ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
        if (user.gameData.money < finalCost) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥' });
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
        user.gameData.money -= finalCost;
        user.gameData.stats.moneySpent += finalCost;
        car.upgrades[upgradeType] = currentLevel + 1;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è
        user.updateTaskProgress('upgradesBought');
        
        await user.save();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –≥–æ–Ω–æ–∫
        if (raceResult.won) {
            const newAchievements = user.checkRaceTypeAchievements();
            for (const achievement of newAchievements) {
                user.unlockAchievement(achievement.id, achievement.name, achievement.description);
            }
            if (newAchievements.length > 0) {
                await user.save();
            }
        }

        res.json({
            success: true,
            newLevel: car.upgrades[upgradeType],
            cost: finalCost,
            remainingMoney: user.gameData.money,
            eventDiscount: eventDiscount,
            originalCost: eventDiscount ? upgradeCheck.cost : null
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è' });
    }
});

// –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –ø–æ–∫—É–ø–∫–∞ –º–∞—à–∏–Ω—ã
router.post('/buy-car', async (req, res) => {
    try {
        const { carId } = req.body;
        
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω
        let allCars;
        try {
            allCars = require('../config/cars.json');
        } catch (error) {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            allCars = [
                { id: 0, name: "Handa Civic", power: 50, speed: 60, handling: 70, acceleration: 55, price: 0 },
                { id: 1, name: "Volks Golf", power: 55, speed: 65, handling: 75, acceleration: 60, price: 3000 },
                { id: 2, name: "Toyata Corolla", power: 52, speed: 62, handling: 72, acceleration: 58, price: 3500 }
            ];
        }
        
        const carToBuy = allCars.find(c => c.id === carId);
        
        if (!carToBuy) {
            return res.status(400).json({ error: '–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–ª–µ–Ω–∞ –ª–∏ —É–∂–µ
        if (user.gameData.cars.some(c => c.id === carId)) {
            return res.status(400).json({ error: '–ú–∞—à–∏–Ω–∞ —É–∂–µ –∫—É–ø–ª–µ–Ω–∞' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        const requiredLevel = gameLogic.getCarRequiredLevel(carToBuy.price);
        if (user.gameData.level < requiredLevel) {
            return res.status(400).json({ error: `–¢—Ä–µ–±—É–µ—Ç—Å—è ${requiredLevel} —É—Ä–æ–≤–µ–Ω—å` });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å–≥–∏
        if (!gameLogic.canAffordPurchase(user.gameData.money, carToBuy.price)) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥' });
        }
        
        // –ü–æ–∫—É–ø–∞–µ–º
        user.gameData.money -= carToBuy.price;
        user.gameData.stats.moneySpent += carToBuy.price;
        
        const newCar = {
            ...carToBuy,
            owned: true,
            fuel: 30,
            maxFuel: 30,
            lastFuelUpdate: new Date(),
            upgrades: {
                engine: 0,
                turbo: 0,
                tires: 0,
                suspension: 0,
                transmission: 0
            },
            specialParts: {
                nitro: false,
                bodyKit: false,
                ecuTune: false,
                fuelTank: false
            }
        };
        
        user.gameData.cars.push(newCar);
        
        await user.save();
        
        res.json({
            success: true,
            car: newCar,
            remainingMoney: user.gameData.money
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞—à–∏–Ω—ã:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞—à–∏–Ω—ã' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
router.get('/opponents', async (req, res) => {
    try {
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const opponents = gameLogic.generateOpponents(user.gameData.level);
        
        res.json({ opponents });
        
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
router.post('/claim-daily-task', async (req, res) => {
    try {
        const { taskId } = req.body;
        
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const result = user.claimTaskReward(taskId);
        
        if (result.success) {
            await user.save();
            
            res.json({
                success: true,
                reward: result.reward,
                bonusReward: result.bonusReward,
                message: result.bonusReward > 0 
                    ? `–ü–æ–ª—É—á–µ–Ω–æ $${result.reward} –∑–∞ "${result.taskName}" + –±–æ–Ω—É—Å $${result.bonusReward}!` 
                    : `–ü–æ–ª—É—á–µ–Ω–æ $${result.reward} –∑–∞ "${result.taskName}"!`,
                gameData: {
                    money: user.gameData.money,
                    dailyTasks: user.gameData.dailyTasks
                }
            });
        } else {
            res.status(400).json({ error: result.error });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã' });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è (–¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
router.post('/update-task-progress', async (req, res) => {
    try {
        const { statType, amount = 1 } = req.body;
        
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const updated = user.updateTaskProgress(statType, amount);
        
        if (updated) {
            await user.save();
        }
        
        res.json({
            success: true,
            dailyTasks: user.gameData.dailyTasks
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞' });
    }
});

// –î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –ø–æ—Å–ª–µ –≥–æ–Ω–∫–∏)
router.post('/add-experience', async (req, res) => {
    try {
        const { amount, source } = req.body;
        
        if (!amount || amount < 0) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞' });
        }
        
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const oldLevel = user.gameData.level;
        user.gameData.experience += amount;
        
        const levelUpResult = user.checkLevelUp();
        
        await user.save();
        
        res.json({
            success: true,
            experience: user.gameData.experience,
            level: user.gameData.level,
            leveledUp: levelUpResult.levelsGained > 0,
            reward: levelUpResult.totalReward
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞' });
    }
});

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
router.get('/leaderboard', async (req, res) => {
    try {
        const { page = 1, limit = 50 } = req.query;
        const cacheKey = `leaderboard_${page}_${limit}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        const cached = leaderboardCache.get(cacheKey);
        if (cached && cached.timestamp > Date.now() - CACHE_TTL) {
            return res.json(cached.data);
        }
        
        const skip = (page - 1) * limit;
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        const leaders = await User.find({})
            .select('username gameData.stats.wins gameData.stats.totalRaces gameData.money gameData.level gameData.experience gameData.rating')
            .sort({ 
                'gameData.level': -1, 
                'gameData.experience': -1,
                'gameData.money': -1 
            })
            .limit(parseInt(limit))
            .skip(skip)
            .lean() // lean() –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö read-only –∑–∞–ø—Ä–æ—Å–æ–≤
            .maxTimeMS(5000); // –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ 5 —Å–µ–∫—É–Ω–¥
        
        const leaderboard = leaders.map((user, index) => ({
            position: skip + index + 1,
            username: user.username,
            wins: user.gameData.stats.wins,
            totalRaces: user.gameData.stats.totalRaces,
            winRate: user.gameData.stats.totalRaces > 0 
                ? ((user.gameData.stats.wins / user.gameData.stats.totalRaces) * 100).toFixed(1)
                : 0,
            money: user.gameData.money,
            level: user.gameData.level,
            experience: user.gameData.experience,
            rating: user.gameData.rating || 1000
        }));
        
        // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        leaderboardCache.set(cacheKey, {
            data: leaderboard,
            timestamp: Date.now()
        });
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à
        if (leaderboardCache.size > 20) {
            const oldestKey = leaderboardCache.keys().next().value;
            leaderboardCache.delete(oldestKey);
        }
        
        res.json(leaderboard);
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
router.get('/achievements', async (req, res) => {
    try {
        const user = await User.findById(req.userId).select('gameData.achievements').lean();
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json({
            achievements: user.gameData.achievements || [],
            total: user.gameData.achievements ? user.gameData.achievements.length : 0
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π' });
    }
});

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
router.post('/unlock-achievement', async (req, res) => {
    try {
        const { achievementId, name, description } = req.body;
        
        if (!achievementId || !name || !description) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è' });
        }
        
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ
        const alreadyUnlocked = user.gameData.achievements.some(achievement => achievement.id === achievementId);
        
        if (alreadyUnlocked) {
            return res.json({ 
                success: false, 
                message: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ' 
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        user.gameData.achievements.push({
            id: achievementId,
            name: name,
            description: description,
            unlockedAt: new Date()
        });
        
        user.gameData.lastAchievementCheck = new Date();
        
        await user.save();
        
        res.json({ 
            success: true, 
            message: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!',
            achievement: { 
                id: achievementId, 
                name: name, 
                description: description,
                unlockedAt: new Date()
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è' });
    }
});

// –ú–∞—Å—Å–æ–≤–æ–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
router.post('/unlock-achievements-batch', async (req, res) => {
    try {
        const { achievements } = req.body;
        
        if (!achievements || !Array.isArray(achievements)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' });
        }
        
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        let newAchievements = [];
        
        achievements.forEach(achievement => {
            const { id, name, description } = achievement;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ
            const alreadyUnlocked = user.gameData.achievements.some(a => a.id === id);
            
            if (!alreadyUnlocked && id && name && description) {
                user.gameData.achievements.push({
                    id: id,
                    name: name,
                    description: description,
                    unlockedAt: new Date()
                });
                
                newAchievements.push({
                    id: id,
                    name: name,
                    description: description
                });
            }
        });
        
        if (newAchievements.length > 0) {
            user.gameData.lastAchievementCheck = new Date();
            await user.save();
        }
        
        res.json({
            success: true,
            newAchievements: newAchievements,
            message: `–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${newAchievements.length} –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π' });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞
router.post('/update-rating', async (req, res) => {
    try {
        const { ratingChange, reason } = req.body;
        
        if (typeof ratingChange !== 'number') {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞' });
        }
        
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        const oldRating = user.gameData.rating || 1000;
        user.gameData.rating = Math.max(0, oldRating + ratingChange);
        
        await user.save();
        
        res.json({
            success: true,
            oldRating: oldRating,
            newRating: user.gameData.rating,
            change: ratingChange,
            reason: reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
router.get('/profile-stats', async (req, res) => {
    try {
        const user = await User.findById(req.userId).select('-password').lean();
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const winRate = user.gameData.stats.totalRaces > 0 
            ? Math.round((user.gameData.stats.wins / user.gameData.stats.totalRaces) * 100)
            : 0;
            
        const averageMoneyPerRace = user.gameData.stats.totalRaces > 0
            ? Math.round(user.gameData.stats.moneyEarned / user.gameData.stats.totalRaces)
            : 0;
            
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–Ω–≥ –∏–≥—Ä–æ–∫–∞
        const rating = user.gameData.rating || 1000;
        let rank = '–ù–æ–≤–∏—á–æ–∫';
        let rankIcon = 'üî∞';
        let rankColor = '#888888';
        
        if (rating >= 2500) { 
            rank = '–ú–∞—Å—Ç–µ—Ä'; 
            rankIcon = 'üëë'; 
            rankColor = '#FF4444';
        } else if (rating >= 2000) { 
            rank = '–ó–æ–ª–æ—Ç–æ'; 
            rankIcon = 'ü•á'; 
            rankColor = '#FFD700';
        } else if (rating >= 1500) { 
            rank = '–°–µ—Ä–µ–±—Ä–æ'; 
            rankIcon = 'ü•à'; 
            rankColor = '#C0C0C0';
        } else if (rating >= 1000) { 
            rank = '–ë—Ä–æ–Ω–∑–∞'; 
            rankIcon = 'ü•â'; 
            rankColor = '#CD7F32';
        }
        
        res.json({
            username: user.username,
            level: user.gameData.level,
            experience: user.gameData.experience,
            money: user.gameData.money,
            rating: rating,
            rank: {
                name: rank,
                icon: rankIcon,
                color: rankColor
            },
            stats: {
                ...user.gameData.stats,
                winRate: winRate,
                averageMoneyPerRace: averageMoneyPerRace
            },
            achievements: {
                total: user.gameData.achievements ? user.gameData.achievements.length : 0,
                list: user.gameData.achievements || []
            },
            cars: {
                owned: user.gameData.cars.length,
                current: user.gameData.currentCar
            },
            skills: user.gameData.skills,
            createdAt: user.createdAt,
            lastLogin: user.lastLogin
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
    }
});

// –ù–∞—á–∞—Ç—å –≥–æ–Ω–∫—É (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–ø–ª–∏–≤–∞)
router.post('/start-race', async (req, res) => {
    try {
        const { carIndex, fuelCost, opponentDifficulty, betAmount, won } = req.body;
        
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ø–ª–∏–≤–æ
        user.regenerateFuel();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç–æ–ø–ª–∏–≤–∞
        const car = user.gameData.cars[carIndex];
        if (!car) {
            return res.status(400).json({ error: '–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        if (car.fuel < fuelCost) {
            const regenTime = user.getFuelRegenTime(carIndex);
            return res.status(400).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ø–ª–∏–≤–∞',
                currentFuel: car.fuel,
                requiredFuel: fuelCost,
                regenTimeMinutes: regenTime
            });
        }
        
        // –¢—Ä–∞—Ç–∏–º —Ç–æ–ø–ª–∏–≤–æ
        const success = user.spendFuel(carIndex, fuelCost);
        if (!success) {
            return res.status(400).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Ç–æ–ø–ª–∏–≤–æ' });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π
        user.updateTaskProgress('totalRaces');
        user.updateTaskProgress('fuelSpent', fuelCost);
        
        // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏ —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω (–¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —á–∏—Ç–æ–≤ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ª–æ–≥–∏–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
        if (won !== undefined) {
            if (won) {
                user.updateTaskProgress('wins');
                if (betAmount) {
                    user.updateTaskProgress('moneyEarned', betAmount * 2); // –í—ã–∏–≥—Ä—ã—à = —Å—Ç–∞–≤–∫–∞ * 2
                }
            }
        }
        
        await user.save();
        
        res.json({
            success: true,
            remainingFuel: car.fuel,
            maxFuel: car.maxFuel,
            dailyTasks: user.gameData.dailyTasks
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –≥–æ–Ω–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –≥–æ–Ω–∫–∏' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –≤—Å–µ—Ö –º–∞—à–∏–Ω
router.get('/fuel-status', async (req, res) => {
    try {
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ø–ª–∏–≤–æ
        user.regenerateFuel();
        await user.save();
        
        const fuelStatus = user.gameData.cars.map((car, index) => ({
            carId: car.id,
            carName: car.name,
            fuel: car.fuel,
            maxFuel: car.maxFuel,
            regenTimeMinutes: user.getFuelRegenTime(index)
        }));
        
        res.json({ fuelStatus });
        
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ø–ª–∏–≤–∞' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
router.get('/current-event', async (req, res) => {
    try {
        const event = await eventManager.getCurrentEvent();
        
        if (!event) {
            return res.json({ 
                success: true, 
                event: null,
                message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π'
            });
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        const now = new Date();
        const timeLeft = event.endTime - now;
        const hoursLeft = Math.floor(timeLeft / (1000 * 60 * 60));
        const minutesLeft = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        
        res.json({
            success: true,
            event: {
                type: event.type,
                title: event.title,
                description: event.description,
                icon: event.icon,
                timeLeft: {
                    hours: hoursLeft,
                    minutes: minutesLeft,
                    total: timeLeft
                }
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è' });
    }
});

// –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞
router.post('/regenerate-fuel', async (req, res) => {
    try {
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –≤—Å–µ—Ö –º–∞—à–∏–Ω
        user.regenerateFuel();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (user.isModified()) {
            await user.save();
        }
        
        res.json({
            success: true,
            cars: user.gameData.cars.map(car => ({
                id: car.id,
                fuel: car.fuel,
                maxFuel: car.maxFuel
            }))
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞' });
    }
});

// –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
router.post('/emergency-save', authMiddleware, async (req, res) => {
    try {
        const { gameData } = req.body;
        
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        user.gameData = gameData;
        user.lastActivity = new Date();
        user.lastEmergencySave = new Date();
        
        await user.save({ validateBeforeSave: false });
        
        res.json({ 
            success: true,
            message: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' });
    }
});

module.exports = router;