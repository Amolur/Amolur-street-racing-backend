const mongoose = require('mongoose');

const eventSchema = new mongoose.Schema({
    type: {
        type: String,
        enum: ['double_rewards', 'upgrade_discount', 'free_fuel', 'bonus_xp'],
        required: true
    },
    title: {
        type: String,
        required: true
    },
    description: {
        type: String,
        required: true
    },
    icon: {
        type: String,
        default: 'üéâ'
    },
    multiplier: {
        type: Number,
        default: 2 // –î–ª—è —Å–æ–±—ã—Ç–∏–π —Å –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏
    },
    discount: {
        type: Number,
        default: 0.5 // 50% —Å–∫–∏–¥–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    },
    startTime: {
        type: Date,
        required: true
    },
    endTime: {
        type: Date,
        required: true
    },
    isActive: {
        type: Boolean,
        default: true
    }
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
eventSchema.index({ isActive: 1, startTime: 1, endTime: 1 });

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
eventSchema.statics.getCurrentEvent = async function() {
    const now = new Date();
    
    const event = await this.findOne({
        isActive: true,
        startTime: { $lte: now },
        endTime: { $gte: now }
    });
    
    return event;
};

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
eventSchema.statics.createRandomEvent = async function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    const currentEvent = await this.getCurrentEvent();
    if (currentEvent) {
        return null; // –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    }
    
    // –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π —Å –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const eventTypes = [
        {
            type: 'double_rewards',
            title: 'üí∞ –î–≤–æ–π–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!',
            description: '–ü–æ–ª—É—á–∞–π—Ç–µ x2 –¥–µ–Ω—å–≥–∏ –∑–∞ –≤—Å–µ –ø–æ–±–µ–¥—ã –≤ –≥–æ–Ω–∫–∞—Ö!',
            icon: 'üí∞',
            multiplier: 2
        },
        {
            type: 'upgrade_discount',
            title: 'üîß –°–∫–∏–¥–∫–∏ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è!',
            description: '50% —Å–∫–∏–¥–∫–∞ –Ω–∞ –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –º–∞—à–∏–Ω!',
            icon: 'üîß',
            discount: 0.5
        },
        {
            type: 'free_fuel',
            title: '‚õΩ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ!',
            description: '–ì–æ–Ω–∫–∏ –Ω–µ —Ä–∞—Å—Ö–æ–¥—É—é—Ç —Ç–æ–ø–ª–∏–≤–æ!',
            icon: '‚õΩ'
        },
        {
            type: 'bonus_xp',
            title: '‚≠ê –î–≤–æ–π–Ω–æ–π –æ–ø—ã—Ç!',
            description: '–ü–æ–ª—É—á–∞–π—Ç–µ x2 –æ–ø—ã—Ç–∞ –∑–∞ –≤—Å–µ –≥–æ–Ω–∫–∏!',
            icon: '‚≠ê',
            multiplier: 2
        }
    ];
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const randomEvent = eventTypes[Math.floor(Math.random() * eventTypes.length)];
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (2 —á–∞—Å–∞)
    const startTime = new Date();
    const endTime = new Date(startTime.getTime() + 2 * 60 * 60 * 1000); // +2 —á–∞—Å–∞
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event = new this({
        ...randomEvent,
        startTime,
        endTime
    });
    
    await event.save();
    return event;
};

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
eventSchema.statics.cleanupExpiredEvents = async function() {
    const now = new Date();
    
    await this.updateMany(
        {
            isActive: true,
            endTime: { $lt: now }
        },
        {
            isActive: false
        }
    );
};

module.exports = mongoose.model('Event', eventSchema);