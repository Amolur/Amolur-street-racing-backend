// utils/eventManager.js
const Event = require('../models/Event');

class EventManager {
    constructor() {
        this.checkInterval = null;
        this.lastEventTime = null;
    }
    
    // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
    start() {
        console.log('üéâ –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—â–µ–Ω–∞');
        
        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        this.cleanupExpiredEvents();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        this.checkInterval = setInterval(() => {
            this.checkAndCreateEvent();
        }, 60 * 1000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
        this.checkAndCreateEvent();
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
    stop() {
        if (this.checkInterval) {
            clearInterval(this.checkInterval);
            this.checkInterval = null;
        }
        console.log('üõë –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    async checkAndCreateEvent() {
        try {
            // –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–æ–±—ã—Ç–∏—è
            await Event.cleanupExpiredEvents();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
            const currentEvent = await Event.getCurrentEvent();
            
            if (currentEvent) {
                // –°–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 2 —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
            if (this.lastEventTime) {
                const timeSinceLastEvent = Date.now() - this.lastEventTime;
                const twoHours = 2 * 60 * 60 * 1000;
                
                if (timeSinceLastEvent < twoHours) {
                    // –ï—â–µ —Ä–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                    return;
                }
            }
            
            // –®–∞–Ω—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (30% –∫–∞–∂–¥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ 2 —á–∞—Å–æ–≤)
            if (Math.random() < 0.3) {
                const newEvent = await Event.createRandomEvent();
                
                if (newEvent) {
                    console.log(`‚ú® –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${newEvent.title}`);
                    this.lastEventTime = Date.now();
                    
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
                    // this.notifyAllPlayers(newEvent);
                }
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —Å–æ–±—ã—Ç–∏–π:', error);
        }
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
    async cleanupExpiredEvents() {
        try {
            await Event.cleanupExpiredEvents();
            console.log('üßπ –ò—Å—Ç–µ–∫—à–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—á–∏—â–µ–Ω—ã');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
        }
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
    async getCurrentEvent() {
        try {
            return await Event.getCurrentEvent();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è:', error);
            return null;
        }
    }
    
    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≥–æ–Ω–∫–∏
    applyEventEffect(event, raceResult) {
        if (!event) return raceResult;
        
        switch (event.type) {
            case 'double_rewards':
                if (raceResult.won) {
                    raceResult.reward *= event.multiplier;
                }
                break;
                
            case 'bonus_xp':
                raceResult.xpGained *= event.multiplier;
                break;
                
            case 'free_fuel':
                raceResult.fuelCost = 0;
                break;
                
            default:
                break;
        }
        
        return raceResult;
    }
    
    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è
    applyUpgradeDiscount(event, originalCost) {
        if (!event || event.type !== 'upgrade_discount') {
            return originalCost;
        }
        
        return Math.floor(originalCost * event.discount);
    }
}

// –°–æ–∑–¥–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
const eventManager = new EventManager();

module.exports = eventManager;